/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => PropertiesTogglePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  isHidden: false
};
var PropertiesTogglePlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new PropertiesToggleSettingTab(this.app, this));
    this.addRibbonIcon("eye", "\uC18D\uC131 \uD328\uB110 \uD1A0\uAE00", () => {
      this.togglePropertyPane();
    });
    this.addCommand({
      id: "toggle-property-pane",
      name: "\uC18D\uC131 \uD328\uB110 \uD1A0\uAE00",
      callback: () => {
        this.togglePropertyPane();
      },
      icon: "eye"
    });
    this.registerEvent(
      this.app.workspace.on("layout-change", () => {
        this.applyVisibilityState();
      })
    );
    this.applyVisibilityState();
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  togglePropertyPane() {
    this.settings.isHidden = !this.settings.isHidden;
    this.saveSettings();
    this.applyVisibilityState();
  }
  applyVisibilityState() {
    const leaves = this.app.workspace.getLeavesOfType("markdown");
    for (const leaf of leaves) {
      if (!leaf.view || !("containerEl" in leaf.view))
        continue;
      const propertySelectors = [
        ".frontmatter-container",
        ".metadata-container",
        ".frontmatter",
        ".properties",
        ".metadata-properties",
        // Source 모드에서 사용되는 추가 선택자
        ".cm-line.HyperMD-frontmatter",
        ".cm-line.hmd-frontmatter"
      ];
      for (const selector of propertySelectors) {
        const containers = leaf.view.containerEl.querySelectorAll(selector);
        containers.forEach((container) => {
          if (container instanceof HTMLElement) {
            container.style.display = this.settings.isHidden ? "none" : "";
            if (selector.includes("cm-line")) {
              if (this.settings.isHidden) {
                container.setAttribute("data-hidden-by-plugin", "true");
                container.style.display = "none";
              } else {
                if (container.getAttribute("data-hidden-by-plugin")) {
                  container.removeAttribute("data-hidden-by-plugin");
                  container.style.display = "";
                }
              }
            }
            let parent = container.parentElement;
            while (parent && parent.classList.contains("metadata-container")) {
              parent.style.display = this.settings.isHidden ? "none" : "";
              parent = parent.parentElement;
            }
          }
        });
      }
    }
  }
};
var PropertiesToggleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("\uC18D\uC131 \uD328\uB110 \uC228\uAE30\uAE30").setDesc("\uC18D\uC131 \uD328\uB110\uC744 \uC228\uAE41\uB2C8\uB2E4.").addToggle((toggle) => toggle.setValue(this.plugin.settings.isHidden).onChange(async (value) => {
      this.plugin.settings.isHidden = value;
      await this.plugin.saveSettings();
      this.plugin.applyVisibilityState();
    }));
    containerEl.createEl("hr");
    const donateSection = containerEl.createEl("div", {
      cls: "donate-section"
    });
    donateSection.createEl("p", {
      text: "\uC774 \uD50C\uB7EC\uADF8\uC778\uC774 \uB3C4\uC6C0\uC774 \uB418\uC5C8\uB2E4\uBA74 \uCEE4\uD53C \uD55C \uC794 \uC0AC\uC8FC\uC138\uC694 \u2615\uFE0F"
    });
    const donateLink = donateSection.createEl("a", {
      href: "https://buymeacoffee.com/dosakkhayo",
      cls: "donate-button"
    });
    donateLink.createEl("img", {
      attr: {
        src: "https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png",
        alt: "Buy Me A Coffee",
        style: "height: 40px;"
      }
    });
  }
};
